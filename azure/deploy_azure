#!/usr/bin/env bash

set -e

# on Azure
# 0) get an Azure account
# 1) note the subscription name associated with the account

# on local computer
# 1) install Azure cli (https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest)
# 2) log in to Azure
#    - az login
# 3) do one time:
#    - az provider register --name Microsoft.Network --wait
#    - az provider register --name Microsoft.Compute --wait
#    - az provider register --name Microsoft.Storage --wait
#    - az provider register --name Microsoft.ContainerService --wait
# 4) install helm >=v2.8.2 (https://github.com/kubernetes/helm/blob/master/docs/install.md)
# 5) modify secret-template.yaml file, replacing TOKEN with output from `openssl rand -hex 32`, and rename it secret-config_azure.yaml
# 6) modify the settings section of this file to match your settings and requirements
# 7) run this file on a not-windows machine

# settings
USER="tjcrone"
DTIME=`date "+%Y%m%d%H%M%S"`
RESOURCE_GROUP="camhd-pangeo"
# currently (17 April 2018) k8s only available in:
# eastus, westeurope, centralus, canadacentral, canadaeast
LOCATION="centralus"
SUBSCRIPTION="Microsoft Azure Sponsorship"
CLUSTER_NAME="camhd-pangeo-$DTIME"
MACHINE="Standard_D4_v3"
#MACHINE="Standard_E4_v3"
NODE_COUNT=3

# setup azure and local env
echo "Setting account name."
az account set -s "$SUBSCRIPTION"
printf "\nCreating resource group.\n"
az group create --name="$RESOURCE_GROUP" --location="$LOCATION" --output table

# usually these only need to be done once but okay to do each time
az provider register --name Microsoft.Network --wait
az provider register --name Microsoft.Compute --wait
az provider register --name Microsoft.Storage --wait
az provider register --name Microsoft.ContainerService --wait

# create an AKS cluster
printf "\nCreating cluster.\n"
az aks create --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP --generate-ssh-keys --node-count $NODE_COUNT --node-vm-size $MACHINE --kubernetes-version 1.10.3 --output table

# get credentials
printf "\nGetting AKS credentials.\n"
az aks get-credentials --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP --output table

# delete the load balancer attached to the static IP address
printf "\nDeleting current static IP load balancer.\n"
IP_ID=`az resource list --name camhd-pangeo-ip --query [*].[id] --output tsv`
LB_GROUP=`az network public-ip show --ids ${IP_ID} --query resourceGroup --output tsv`
az network lb delete --name kubernetes --resource-group $LB_GROUP

# move public ip address to the new automatic resource group
printf "\nMoving static IP address into the new resource group.\n"
AUTO_GROUP="MC_${RESOURCE_GROUP}_${CLUSTER_NAME}_${LOCATION}"
az resource move --destination-group $AUTO_GROUP --ids $IP_ID

exit

# set up helm and tiller
kubectl create serviceaccount tiller --namespace=kube-system
helm init --service-account tiller
kubectl --namespace=kube-system patch deployment tiller-deploy --type=json --patch='[{"op": "add", "path": "/spec/template/spec/containers/0/command", "value": ["/tiller", "--listen=localhost:44134"]}]'

# get helm repositories
helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
helm repo update

# wait for tiller to come up
printf "\nWaiting for tiller to come up ..."
test=`helm status 2>&1 | cut -d' ' -f1-2`
while [[ $test != "Error: release" ]]; do
  test=`helm status 2>&1 | cut -d' ' -f1-2`
  sleep 1
done
printf " done.\n\n"

# replace secret
TOKEN=`openssl rand -hex 32`
sed -i '' -e "s/^  secretToken.*/  secretToken: \"$TOKEN\"/" secret-config.yaml

# install jupyterhub on the cluster
echo "Installing jupyterhub."
helm install jupyterhub/jupyterhub --version=v0.7-82bed4a --name=jupyter --namespace=jupyter --timeout=600 -f secret-config.yaml -f jupyter-config.yaml
